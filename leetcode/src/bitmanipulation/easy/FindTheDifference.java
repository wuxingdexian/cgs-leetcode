package bitmanipulation.easy;

import java.util.HashMap;
import java.util.Map;

/**
 * <p>
 * 背景描述：
 * 389. Find the Difference
 * Given two strings s and t which consist of only lowercase letters.
 *
 * String t is generated by random shuffling string s and then add one more letter at a random position.
 *
 * Find the letter that was added in t.
 *
 * Example:
 *
 * Input:
 * s = "abcd"
 * t = "abcde"
 *
 * Output:
 * e
 *
 * Explanation:
 * 'e' is the letter that was added.
 * <p>
 * 1. 建模：
 * （1）集合+ bit string；
 * （2）字符数量function：字符c，若该字符不是多出来的那个，则num(c) = 2k，偶数个；若为多出来的那个，则num(c) = 2k + 1; 则执行异或后，一定能找到多出来的那个
 * 核心：自己和自己异或，结果应该是0，那异或在结合律成立
 * 2. 算法范式：暴力法 或其它
 * 3. 算法：遍历
 * 4. 数据结构：遍历两个数组，然后异或操作
 * <p>
 * <a href="dhshenchanggan@163.com" />
 *
 * 异或运算
 * 1、交换律  2、结合律（即(a^b)^c == a^(b^c)） 3、对于任何数x，都有x^x=0，x^0=x 4、自反性 A XOR B XOR B = A xor  0 = A
 * <a href="https://baike.baidu.com/item/%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/20794678?fr=aladdin"></a>
 * @author changgan on 07/08/2017
 * @see
 * @since DiscreteMathematics on  07/08/2017
 */
public class FindTheDifference {
    public char findTheDifference(String s, String t) {
        if (null == s || null == t) {
            return ' ';
        }
        char result = t.charAt(0);
        for(int i = 1; i < t.length(); i++) {
            result ^= t.charAt(i);
        }
        for (int i = 0; i < s.length(); i++) {
            result ^= s.charAt(i);
        }
        return result;
    }
    /**
     * 这个方法太重，是为了查看别人的答案而写的这个代码~。~
     * @param s
     * @param t
     * @return
     */
    public char findTheDifferenceTest(String s, String t) {

        char[] sourceCharArray = s.toCharArray();
        Map<Character, Integer> sourceMap = new HashMap<Character, Integer>();
        for (int i=0;i<sourceCharArray.length;i++) {
            Integer num = null != sourceMap.get(sourceCharArray[i])? sourceMap.get(sourceCharArray[i]): 0;
            sourceMap.put(sourceCharArray[i], num+1);
        }

        char[] modifiedCharArray = t.toCharArray();
        Map<Character, Integer> modifiedMap = new HashMap<Character, Integer>();
        for (int i=0;i<modifiedCharArray.length;i++) {
            Integer num = null != modifiedMap.get(modifiedCharArray[i])? modifiedMap.get(modifiedCharArray[i]): 0;
            modifiedMap.put(modifiedCharArray[i], num+1);
        }

        for (Map.Entry<Character, Integer> entry: modifiedMap.entrySet()) {
            if (null == sourceMap.get(entry.getKey())) {
                return entry.getKey();
            }
            if (!sourceMap.get(entry.getKey()).equals(entry.getValue())) {
                return entry.getKey();
            }
        }
        return ' ';
    }

    public static void main(String[] args) {
        char theDifference = new FindTheDifference().findTheDifference("aa", "aaa");
        System.out.println(theDifference);
    }
}
